
//Generated By XCodeFactory
package org.guihuotv.search.web.dao;

import uw.dm.*;
import uw.dm.impl.*;
import uw.dm.util.*;
import org.guihuotv.search.web.pojo.*;

import java.util.*;
import java.sql.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



/**
 * Title: Base table MscUser 的DAO类。
 * Description: 本文件使用XCodeFactory自动生成。
 * 本类为DAO类，通过数据库表映像，实现数据库的三个方法。
 */
public class MscUserDAO {

	private static final Logger logger = LoggerFactory.getLogger(MscUserDAO.class);

	/**
	 * 获得对象。
	 *
	 */
	public static MscUser load(DAOFactoryImpl dao,String tableName,String[] colList,String whereSql,Object[] paramList) throws TransactionException
	{
		MscUser mscUser = null;
		if (colList==null){
			mscUser = selectFromDb(dao,tableName,whereSql,paramList);
		}else{
			mscUser = liteSelectFromDb(dao,tableName,colList,whereSql,paramList);
		}
		return mscUser;
	}


	
	/**
	 * 更新数据库。
	 * @throws UnauthorizedException
	 */
	public static void update(DAOFactoryImpl dao,String tableName,MscUser mscUser)  throws TransactionException
	{	
		if (mscUser.LIST_COL_UPDATED==null){//如果updatelist=null，说明肯定是完整模式
			updateToDb(dao,tableName,mscUser);
		}else{
			liteUpdateToDb(dao,tableName,mscUser);
		}
	}
	


	/**
	 * 建立对象。
	 *
	 */
	public static MscUser save(DAOFactoryImpl dao,String tableName,MscUser mscUser)  throws TransactionException
	{
		return insertIntoDb(dao,tableName,mscUser);
	}

	
	
	/**
	 * 向数据库中插入一条数据。
	 */
	private static MscUser insertIntoDb(DAOFactoryImpl dao,String tableName,MscUser mscUser)  throws TransactionException{
		String insertSql=
			"INSERT INTO "+(tableName==null?"msc_user":tableName) +
			"(id,username,passwd,msc_perm,org_perm,org_name,alias_name,telephone,mobile,email,last_logon_date,last_logon_ip,create_date,modify_date,status) "+
			"VALUES "+
			"(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_user":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,insertSql);
			
			if (mscUser.getId()<=0) mscUser.setId(SequenceManager.nextId("msc_user"));
			
			pstmt.setLong(1,mscUser.getId());
			pstmt.setString(2,mscUser.getUsername());
			pstmt.setString(3,mscUser.getPasswd());
			pstmt.setString(4,mscUser.getMscPerm());
			pstmt.setString(5,mscUser.getOrgPerm());
			pstmt.setString(6,mscUser.getOrgName());
			pstmt.setString(7,mscUser.getAliasName());
			pstmt.setString(8,mscUser.getTelephone());
			pstmt.setString(9,mscUser.getMobile());
			pstmt.setString(10,mscUser.getEmail());
			pstmt.setTimestamp(11,DmValueUtils.dateToTimestamp(mscUser.getLastLogonDate()));
			pstmt.setString(12,mscUser.getLastLogonIp());
			pstmt.setTimestamp(13,DmValueUtils.dateToTimestamp(mscUser.getCreateDate()));
			pstmt.setTimestamp(14,DmValueUtils.dateToTimestamp(mscUser.getModifyDate()));
			pstmt.setInt(15,mscUser.getStatus());
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();
			else
			 pstmt.executeUpdate();
			 mscUser.CURRENT_TABLE_NAME = (tableName==null?null:tableName);
		}
		catch( SQLException sqle ){
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscUser.java:insertIntoDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
		return mscUser;
	}

	/**
	 * 保存该对象数据到数据库中.
	 */
	private static  void updateToDb(DAOFactoryImpl dao,String tableName,MscUser mscUser)  throws TransactionException{
		String updateSql =
		"UPDATE "+(tableName==null?"msc_user":tableName)+" SET " +
		"username=?,passwd=?,msc_perm=?,org_perm=?,org_name=?,alias_name=?,telephone=?,mobile=?,email=?,last_logon_date=?,last_logon_ip=?,create_date=?,modify_date=?,status=? "+
		"WHERE id=?";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_user":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,updateSql);
			pstmt.setString(1,mscUser.getUsername());
			pstmt.setString(2,mscUser.getPasswd());
			pstmt.setString(3,mscUser.getMscPerm());
			pstmt.setString(4,mscUser.getOrgPerm());
			pstmt.setString(5,mscUser.getOrgName());
			pstmt.setString(6,mscUser.getAliasName());
			pstmt.setString(7,mscUser.getTelephone());
			pstmt.setString(8,mscUser.getMobile());
			pstmt.setString(9,mscUser.getEmail());
			pstmt.setTimestamp(10,DmValueUtils.dateToTimestamp(mscUser.getLastLogonDate()));
			pstmt.setString(11,mscUser.getLastLogonIp());
			pstmt.setTimestamp(12,DmValueUtils.dateToTimestamp(mscUser.getCreateDate()));
			pstmt.setTimestamp(13,DmValueUtils.dateToTimestamp(mscUser.getModifyDate()));
			pstmt.setInt(14,mscUser.getStatus());
			
			pstmt.setLong(15,mscUser.getId());
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();			
			else
			 pstmt.executeUpdate();
			 mscUser.CURRENT_TABLE_NAME = (tableName==null?null:tableName);

		}
		catch( SQLException sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscUser.java:updateToDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try { if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}
	
	/**
	 * 轻量级保存该对象数据到数据库中.
	 */
	private static  void liteUpdateToDb(DAOFactoryImpl dao,String tableName,MscUser mscUser)  throws TransactionException{
		Connection con = null;
		PreparedStatement pstmt = null;
		List<String> list = mscUser.LIST_COL_UPDATED;
        StringBuilder sb = new StringBuilder();
        sb.append("UPDATE "+(tableName==null?"msc_user":tableName)+" set ");
        for (int i=0;i<list.size();i++){
        	if (i==0){
        		sb.append(list.get(i)+"=?");
        	}else{
				sb.append(","+list.get(i)+"=?");
			}
		}
		sb.append(" WHERE id=?");
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_user":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,sb.toString());
			String col = "";
			for (int i=0;i<list.size();i++){
				col = list.get(i);
				DmReflectUtils.DAOLiteSaveReflect(pstmt,mscUser,i+1,MscUser.MAP_COL_NAME.get(col),MscUser.MAP_COL_TYPE.get(col));
			}
			
			col = "id";
			DmReflectUtils.DAOLiteSaveReflect(pstmt,mscUser,list.size()+1,MscUser.MAP_COL_NAME.get(col),MscUser.MAP_COL_TYPE.get(col));
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();
			else
			 pstmt.executeUpdate();
			mscUser.CURRENT_TABLE_NAME = (tableName==null?null:tableName);

		}
		catch( Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscUser.java:liteUpdateToDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try { if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}
	


	/**
	 * 从数据库装入该对象所需要的数据
	 */
	private static MscUser selectFromDb(DAOFactoryImpl dao,String tableName,String whereSql,Object[] paramList) throws TransactionException{
		Connection con = null;
		PreparedStatement pstmt = null;
		MscUser mscUser= null;
		try {
			String loadSql =
			"SELECT id,username,passwd,msc_perm,org_perm,org_name,alias_name,telephone,mobile,email,last_logon_date,last_logon_ip,create_date,modify_date,status FROM "+(tableName==null?"msc_user":tableName)+" "+(whereSql==null?"WHERE id=?":whereSql);
			con = dao.getTransactionController().getConnection((tableName==null?"msc_user":tableName),"read");
			pstmt = con.prepareStatement(loadSql);
			if (paramList != null && paramList.length > 0) {
				for (int i = 0; i < paramList.length; i++) {
					DmReflectUtils.CommandUpdateReflect(pstmt, i + 1, paramList[i]);
				}
			}
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
			mscUser= new MscUser(rs.getLong("id"),DmValueUtils.nullToStr(rs.getString("username")),DmValueUtils.nullToStr(rs.getString("passwd")),DmValueUtils.nullToStr(rs.getString("msc_perm")),DmValueUtils.nullToStr(rs.getString("org_perm")),DmValueUtils.nullToStr(rs.getString("org_name")),DmValueUtils.nullToStr(rs.getString("alias_name")),DmValueUtils.nullToStr(rs.getString("telephone")),DmValueUtils.nullToStr(rs.getString("mobile")),DmValueUtils.nullToStr(rs.getString("email")),rs.getTimestamp("last_logon_date"),DmValueUtils.nullToStr(rs.getString("last_logon_ip")),rs.getTimestamp("create_date"),rs.getTimestamp("modify_date"),rs.getInt("status"));
			mscUser.CURRENT_TABLE_NAME = (tableName==null?null:tableName);

			}
			rs.close();
		}
		catch( Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscUser.java:selectFromDb(): ", sqle );
		}
		finally {
			try {  pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
		return mscUser;
	}
	/**
	 * 轻量级载入对象.
	 */
	private static MscUser liteSelectFromDb(DAOFactoryImpl dao,String tableName,String[] colList,String whereSql,Object[] paramList) throws TransactionException{
		Connection con = null;
		PreparedStatement pstmt = null;
		MscUser mscUser= null;
        StringBuilder sb = new StringBuilder();
        sb.append(" select ");
        for (int i=0;i<colList.length;i++){
        	if (i==0) {
        		sb.append(colList[i]);
        	}else{
				sb.append(","+colList[i]);
			}
		}
		sb.append(" FROM "+(tableName==null?"msc_user":tableName));
		sb.append(" ").append(whereSql==null?"WHERE id=?":whereSql);
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_user":tableName),"read");
			pstmt = con.prepareStatement(sb.toString());
			if (paramList != null && paramList.length > 0) {
				for (int i = 0; i < paramList.length; i++) {
					DmReflectUtils.CommandUpdateReflect(pstmt, i + 1, paramList[i]);
				}
			}
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				mscUser = new MscUser();
				String col = "";
				for (int i=0;i<colList.length;i++){
					col = colList[i];
					DmReflectUtils.DAOLiteLoadReflect(rs,mscUser,col,MscUser.MAP_COL_NAME.get(col),MscUser.MAP_COL_TYPE.get(col));
				}
				mscUser.CURRENT_TABLE_NAME = (tableName==null?null:tableName);
			}
			rs.close();
		}
		catch( Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscUser.java:liteSelectFromDb(): " , sqle );
		}
		finally {
			try {  pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
		return mscUser;
	}

	
	/**
	 * 删除数据。
	 */
	public static void delete(DAOFactoryImpl dao,String tableName,MscUser mscUser)  throws TransactionException
	{
		deleteFromDb(dao,tableName,mscUser);
	}

	/**
	 * 直接从数据库中删除数据.
	 */
	private static void deleteFromDb(DAOFactoryImpl dao,String tableName,MscUser mscUser)  throws TransactionException
	{
		String deleteSql = 
		"DELETE FROM "+(tableName==null?"msc_user":tableName)+" WHERE id=?";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_user":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,deleteSql);
			pstmt.setLong(1,mscUser.getId());
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();			
			else
			 pstmt.executeUpdate();
		}
		catch( SQLException sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscUser.java:deleteFromDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}

	

}