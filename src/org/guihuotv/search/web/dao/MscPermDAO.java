
//Generated By XCodeFactory
package org.guihuotv.search.web.dao;

import uw.dm.*;
import uw.dm.impl.*;
import uw.dm.util.*;
import org.guihuotv.search.web.pojo.*;

import java.util.*;
import java.sql.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



/**
 * Title: Base table MscPerm 的DAO类。
 * Description: 本文件使用XCodeFactory自动生成。
 * 本类为DAO类，通过数据库表映像，实现数据库的三个方法。
 */
public class MscPermDAO {

	private static final Logger logger = LoggerFactory.getLogger(MscPermDAO.class);

	/**
	 * 获得对象。
	 *
	 */
	public static MscPerm load(DAOFactoryImpl dao,String tableName,String[] colList,String whereSql,Object[] paramList) throws TransactionException
	{
		MscPerm mscPerm = null;
		if (colList==null){
			mscPerm = selectFromDb(dao,tableName,whereSql,paramList);
		}else{
			mscPerm = liteSelectFromDb(dao,tableName,colList,whereSql,paramList);
		}
		return mscPerm;
	}


	
	/**
	 * 更新数据库。
	 * @throws UnauthorizedException
	 */
	public static void update(DAOFactoryImpl dao,String tableName,MscPerm mscPerm)  throws TransactionException
	{	
		if (mscPerm.LIST_COL_UPDATED==null){//如果updatelist=null，说明肯定是完整模式
			updateToDb(dao,tableName,mscPerm);
		}else{
			liteUpdateToDb(dao,tableName,mscPerm);
		}
	}
	


	/**
	 * 建立对象。
	 *
	 */
	public static MscPerm save(DAOFactoryImpl dao,String tableName,MscPerm mscPerm)  throws TransactionException
	{
		return insertIntoDb(dao,tableName,mscPerm);
	}

	
	
	/**
	 * 向数据库中插入一条数据。
	 */
	private static MscPerm insertIntoDb(DAOFactoryImpl dao,String tableName,MscPerm mscPerm)  throws TransactionException{
		String insertSql=
			"INSERT INTO "+(tableName==null?"msc_perm":tableName) +
			"(id,parent_id,perm_type,perm_name,perm_desc,child_num,action_url,menu_layer,menu_path,create_date,modify_date,status) "+
			"VALUES "+
			"(?,?,?,?,?,?,?,?,?,?,?,?) ";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_perm":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,insertSql);
			
			if (mscPerm.getId()<=0) mscPerm.setId(SequenceManager.nextId("msc_perm"));
			
			pstmt.setLong(1,mscPerm.getId());
			pstmt.setLong(2,mscPerm.getParentId());
			pstmt.setInt(3,mscPerm.getPermType());
			pstmt.setString(4,mscPerm.getPermName());
			pstmt.setString(5,mscPerm.getPermDesc());
			pstmt.setInt(6,mscPerm.getChildNum());
			pstmt.setString(7,mscPerm.getActionUrl());
			pstmt.setInt(8,mscPerm.getMenuLayer());
			pstmt.setString(9,mscPerm.getMenuPath());
			pstmt.setTimestamp(10,DmValueUtils.dateToTimestamp(mscPerm.getCreateDate()));
			pstmt.setTimestamp(11,DmValueUtils.dateToTimestamp(mscPerm.getModifyDate()));
			pstmt.setInt(12,mscPerm.getStatus());
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();
			else
			 pstmt.executeUpdate();
			 mscPerm.CURRENT_TABLE_NAME = (tableName==null?null:tableName);
		}
		catch( SQLException sqle ){
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscPerm.java:insertIntoDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
		return mscPerm;
	}

	/**
	 * 保存该对象数据到数据库中.
	 */
	private static  void updateToDb(DAOFactoryImpl dao,String tableName,MscPerm mscPerm)  throws TransactionException{
		String updateSql =
		"UPDATE "+(tableName==null?"msc_perm":tableName)+" SET " +
		"parent_id=?,perm_type=?,perm_name=?,perm_desc=?,child_num=?,action_url=?,menu_layer=?,menu_path=?,create_date=?,modify_date=?,status=? "+
		"WHERE id=?";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_perm":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,updateSql);
			pstmt.setLong(1,mscPerm.getParentId());
			pstmt.setInt(2,mscPerm.getPermType());
			pstmt.setString(3,mscPerm.getPermName());
			pstmt.setString(4,mscPerm.getPermDesc());
			pstmt.setInt(5,mscPerm.getChildNum());
			pstmt.setString(6,mscPerm.getActionUrl());
			pstmt.setInt(7,mscPerm.getMenuLayer());
			pstmt.setString(8,mscPerm.getMenuPath());
			pstmt.setTimestamp(9,DmValueUtils.dateToTimestamp(mscPerm.getCreateDate()));
			pstmt.setTimestamp(10,DmValueUtils.dateToTimestamp(mscPerm.getModifyDate()));
			pstmt.setInt(11,mscPerm.getStatus());
			
			pstmt.setLong(12,mscPerm.getId());
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();			
			else
			 pstmt.executeUpdate();
			 mscPerm.CURRENT_TABLE_NAME = (tableName==null?null:tableName);

		}
		catch( SQLException sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscPerm.java:updateToDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try { if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}
	
	/**
	 * 轻量级保存该对象数据到数据库中.
	 */
	private static  void liteUpdateToDb(DAOFactoryImpl dao,String tableName,MscPerm mscPerm)  throws TransactionException{
		Connection con = null;
		PreparedStatement pstmt = null;
		List<String> list = mscPerm.LIST_COL_UPDATED;
        StringBuilder sb = new StringBuilder();
        sb.append("UPDATE "+(tableName==null?"msc_perm":tableName)+" set ");
        for (int i=0;i<list.size();i++){
        	if (i==0){
        		sb.append(list.get(i)+"=?");
        	}else{
				sb.append(","+list.get(i)+"=?");
			}
		}
		sb.append(" WHERE id=?");
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_perm":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,sb.toString());
			String col = "";
			for (int i=0;i<list.size();i++){
				col = list.get(i);
				DmReflectUtils.DAOLiteSaveReflect(pstmt,mscPerm,i+1,MscPerm.MAP_COL_NAME.get(col),MscPerm.MAP_COL_TYPE.get(col));
			}
			
			col = "id";
			DmReflectUtils.DAOLiteSaveReflect(pstmt,mscPerm,list.size()+1,MscPerm.MAP_COL_NAME.get(col),MscPerm.MAP_COL_TYPE.get(col));
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();
			else
			 pstmt.executeUpdate();
			mscPerm.CURRENT_TABLE_NAME = (tableName==null?null:tableName);

		}
		catch( Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscPerm.java:liteUpdateToDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try { if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}
	


	/**
	 * 从数据库装入该对象所需要的数据
	 */
	private static MscPerm selectFromDb(DAOFactoryImpl dao,String tableName,String whereSql,Object[] paramList) throws TransactionException{
		Connection con = null;
		PreparedStatement pstmt = null;
		MscPerm mscPerm= null;
		try {
			String loadSql =
			"SELECT id,parent_id,perm_type,perm_name,perm_desc,child_num,action_url,menu_layer,menu_path,create_date,modify_date,status FROM "+(tableName==null?"msc_perm":tableName)+" "+(whereSql==null?"WHERE id=?":whereSql);
			con = dao.getTransactionController().getConnection((tableName==null?"msc_perm":tableName),"read");
			pstmt = con.prepareStatement(loadSql);
			if (paramList != null && paramList.length > 0) {
				for (int i = 0; i < paramList.length; i++) {
					DmReflectUtils.CommandUpdateReflect(pstmt, i + 1, paramList[i]);
				}
			}
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
			mscPerm= new MscPerm(rs.getLong("id"),rs.getLong("parent_id"),rs.getInt("perm_type"),DmValueUtils.nullToStr(rs.getString("perm_name")),DmValueUtils.nullToStr(rs.getString("perm_desc")),rs.getInt("child_num"),DmValueUtils.nullToStr(rs.getString("action_url")),rs.getInt("menu_layer"),DmValueUtils.nullToStr(rs.getString("menu_path")),rs.getTimestamp("create_date"),rs.getTimestamp("modify_date"),rs.getInt("status"));
			mscPerm.CURRENT_TABLE_NAME = (tableName==null?null:tableName);

			}
			rs.close();
		}
		catch( Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscPerm.java:selectFromDb(): ", sqle );
		}
		finally {
			try {  pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
		return mscPerm;
	}
	/**
	 * 轻量级载入对象.
	 */
	private static MscPerm liteSelectFromDb(DAOFactoryImpl dao,String tableName,String[] colList,String whereSql,Object[] paramList) throws TransactionException{
		Connection con = null;
		PreparedStatement pstmt = null;
		MscPerm mscPerm= null;
        StringBuilder sb = new StringBuilder();
        sb.append(" select ");
        for (int i=0;i<colList.length;i++){
        	if (i==0) {
        		sb.append(colList[i]);
        	}else{
				sb.append(","+colList[i]);
			}
		}
		sb.append(" FROM "+(tableName==null?"msc_perm":tableName));
		sb.append(" ").append(whereSql==null?"WHERE id=?":whereSql);
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_perm":tableName),"read");
			pstmt = con.prepareStatement(sb.toString());
			if (paramList != null && paramList.length > 0) {
				for (int i = 0; i < paramList.length; i++) {
					DmReflectUtils.CommandUpdateReflect(pstmt, i + 1, paramList[i]);
				}
			}
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				mscPerm = new MscPerm();
				String col = "";
				for (int i=0;i<colList.length;i++){
					col = colList[i];
					DmReflectUtils.DAOLiteLoadReflect(rs,mscPerm,col,MscPerm.MAP_COL_NAME.get(col),MscPerm.MAP_COL_TYPE.get(col));
				}
				mscPerm.CURRENT_TABLE_NAME = (tableName==null?null:tableName);
			}
			rs.close();
		}
		catch( Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscPerm.java:liteSelectFromDb(): " , sqle );
		}
		finally {
			try {  pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
		return mscPerm;
	}

	
	/**
	 * 删除数据。
	 */
	public static void delete(DAOFactoryImpl dao,String tableName,MscPerm mscPerm)  throws TransactionException
	{
		deleteFromDb(dao,tableName,mscPerm);
	}

	/**
	 * 直接从数据库中删除数据.
	 */
	private static void deleteFromDb(DAOFactoryImpl dao,String tableName,MscPerm mscPerm)  throws TransactionException
	{
		String deleteSql = 
		"DELETE FROM "+(tableName==null?"msc_perm":tableName)+" WHERE id=?";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"msc_perm":tableName),"write");
			pstmt = dao.getBatchUpdateController().prepareStatement(con,deleteSql);
			pstmt.setLong(1,mscPerm.getId());
			
			if (dao.getBatchUpdateController().getBatchStatus())
			 pstmt.addBatch();			
			else
			 pstmt.executeUpdate();
		}
		catch( SQLException sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException("TransactionException in DbMscPerm.java:deleteFromDb(): " , sqle );
		}
		finally {
			try {  if (!dao.getBatchUpdateController().getBatchStatus()) pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}

	

}