
//Generated By XCodeFactory
package org.guihuotv.search.web.dao;


import uw.dm.*;
import uw.dm.connectionpool.ConnectionPool.ConnectionWrapper;
import uw.dm.impl.*;
import uw.dm.dialect.*;
import uw.dm.util.*;

import org.guihuotv.search.web.pojo.*;

import java.util.*;
import java.sql.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Title: Base table NgnSay 列表类
 * Description: 本文件使用XCodeFactory自动生成。
 * 该类使用Value Object的方式通过List返回数据给前台。
 * 并支持使用ArrayList指定列获取列表，并返回。
 */
public class NgnSayList implements DataList<NgnSay>{
	
	private static final Logger logger = LoggerFactory.getLogger(NgnSayList.class);
	
	private static final long serialVersionUID = 1L;

	/**
	 * DAOFactoryImpl实例
	 */
	private DAOFactoryImpl dao = null;
	/**
	 * 多个相同结构表的附加表名
	 */
	private String tableName = null;
	/**
	 * 设定的sql条件
	 */
	private String addSQL = "";
	/**
	 * 开始的索引
	 */
	private int startIndex = 0;
	/**
	 * 返回的结果集大小
	 */
	private int resultNum = 0;
	/**
	 * 是否自动调用countAllSize()
	 */
	private boolean autoCount = false;
	/**
	 * 当前索引
	 */
	private int currentIndex = -1;
	/**
	 * 整个表数据量大小
	 */
	private int allsize = 0;
	/**
	 * List大小（实际返回的结果集大小）
	 */
	private int size = 0;
	/**
	 * 总页数
	 */
	private int pagecount = 0;
	
	/**
	 * 返回的value object数组
	 */
	private List<NgnSay> results = null;
	/**
	 * 指定字段的list
	 */
	private String[] colList = null;
	/**
	 * pstmt的set列表
	 */
	private Object[] paramList = null;

	/**
	 * 构造器.
	 * @param dao 用来提供factory实例。
	 * @param colList 指定的列.
	 * @param addSQL 附加的条件语句.
	 * @param startIndex 起始显示的索引
	 * @param resultNum 返回的结果集大小
	 */
	public NgnSayList(DAOFactoryImpl dao,String tableName,String[] colList,String addSQL,Object[] paramList,int startIndex,int resultNum,boolean autoCount) throws TransactionException{
		this.dao = dao;
		this.tableName = tableName;
		this.addSQL = addSQL;
		this.startIndex = startIndex;
		this.resultNum = resultNum;
		this.autoCount = autoCount;
		this.colList = colList;
		this.paramList = paramList;
		//如果不允许加载,则要强制设置allsize大小。
		if (this.autoCount){
			countAllSize();
		}else{
			this.allsize = this.resultNum;
		}
		//判断页码是否在正确范围内 
		if(this.startIndex>=this.allsize) { this.startIndex = this.allsize-this.resultNum; }
		if(this.startIndex<0) { this.startIndex = 0; }
		//计算总页数
		this.pagecount = (int)Math.ceil((double)allsize/resultNum);
		NgnSayDbList(this.addSQL,this.startIndex,this.resultNum);
	}
	
	
	/**
	 * 通过oracle数据库的功能进行分页。
	 * @param addSQL 附加的条件语句.
	 * @param startIndex 起始显示的索引
	 * @param resultNum 返回的结果集大小
	 */
	public void NgnSayDbList(String addSQL,int startIndex,int resultNum) throws TransactionException
	{
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"ngn_say":tableName),"read");
			//重整sql
			Dialect dialect = DialectManager.getDialect(((ConnectionWrapper)con).getDbType());
			String sql = this.getSql();
			Object[] po = null;
			if (resultNum>0&&startIndex>=0){
				po = dialect.getPagedSQL(sql, startIndex, resultNum);
				sql = (String)po[0];
				results = new ArrayList<NgnSay>(this.resultNum);
			}else{
				results = new ArrayList<NgnSay>();
			}

			pstmt = con.prepareStatement(sql);
			int i=0;
			if (paramList!=null&&paramList.length>0){
				for (i=0;i<paramList.length;i++){
					DmReflectUtils.CommandUpdateReflect(pstmt, i+1, paramList[i]);
				}
			}			
			if (resultNum>0&&startIndex>=0){
				pstmt.setInt(i+1,(Integer)po[1]);
				pstmt.setInt(i+2,(Integer)po[2]);
			}
			ResultSet rs = pstmt.executeQuery();
			this.loadData(rs);
			rs.close();
		}
		catch( Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException( "SQLException in NgnSayList.java:NgnSayList(): " ,sqle );
		}
		finally {
			try {  pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}

	
	/**
	 * 查出当前表所有的记录大小
	 * @return 当前表所有的记录大小
	 */
	private void countAllSize() throws TransactionException
	{
		String countSql =
		"SELECT COUNT(id) AS COUNT FROM "+(tableName==null?"ngn_say":tableName);
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = dao.getTransactionController().getConnection((tableName==null?"ngn_say":tableName),"read");
			pstmt = con.prepareStatement(countSql + " " + addSQL);
			int i=0;
			if (paramList!=null&&paramList.length>0){
				for (i=0;i<paramList.length;i++){
					DmReflectUtils.CommandUpdateReflect(pstmt, i+1, paramList[i]);
				}
			}	
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				this.allsize = rs.getInt(1);
			}
			rs.close();
		}
		catch(Exception sqle ) {
			logger.error(sqle.getMessage(),sqle);
			throw new TransactionException( "TransactionException in NgnSayList.java:countAllSize(): " , sqle );
		}
		finally {
			try {  pstmt.close(); }
			catch (Exception e) { logger.error(e.getMessage(),e); }
			try {  if (dao.getTransactionController().isAutoCommit()) con.close();   }
			catch (Exception e) { logger.error(e.getMessage(),e); }
		}
	}
	
	/**
	 * 定位到某条位置
	 */
	public void absolute(int index)
	{
		this.currentIndex = index-1;
	}
	
	/**
	 * 获得指定处的对象
	 * @param index
	 * @return
	 */
	public NgnSay get(int index){
		return results.get(index);
	}


	/**
	 * 是否有下一条记录
	 * @return 是否有下一条记录
	 */
	public boolean hasNext()
	{
		return (currentIndex+1 < this.size);
	}

	/**
	 * 获取下一条记录
	 * @return 下一条记录
	 */
	public NgnSay next()
	{
		if (currentIndex < this.size) {
			currentIndex++;
		}
		return results.get(currentIndex);
	}

	/**
	 * 获取下一条记录索引
	 * @return 下一条记录索引
	 */
	public int nextIndex()
	{
		return currentIndex+1;
	}

	/**
	 * 是否有上一条记录
	 * @return 是否有上一条记录
	 */
	public boolean hasPrevious()
	{
		return (currentIndex > 0);
	}

	/**
	 * 获取上一条记录
	 * @return 上一条记录
	 */
	public NgnSay previous()
	{
		if (currentIndex > -1) {
			currentIndex--;
		}
		return results.get(currentIndex);
	}

	/**
	 * 获取上一条记录索引
	 * @return 上一条记录索引
	 */
	public int previousIndex()
	{
		return currentIndex-1;
	}

	/**
	 * 为了兼容List接口，不实现，不起作用。
	 * 抛出异常
	 */
	public void remove() {
		throw new UnsupportedOperationException();
	}	

	/**
	 * 获取当前List大小
	 * @return 当前List大小
	 */
	public int size()
	{
		return this.size;
	}

	/**
	 * 获取该表/视图所有的数据大小
	 * @return 该表/视图所有的数据大小
	 */
	public int allsize() throws TransactionException
	{
		if (!this.autoCount){
			this.countAllSize();
			this.autoCount=true;
		}
			return this.allsize;
	}

	/**
	 * 按照总记录数和每页条数计算出页数
	 * @return 页数
	 */
	public int pagecount(){
		return this.pagecount;
	}


	/**
	 * 返回该结果集
	 * @return 结果集
	 */
	public List<NgnSay> results()
	{
		return this.results;
	}

	/**
	 * 重新设定结果集合
	 * @param objects
	 */
	public void reset(List<NgnSay> objects){
		this.results = objects;
		this.currentIndex = -1;
		if (this.size!=objects.size()){
			this.size = objects.size();
			this.allsize = (int)this.size*objects.size()/this.allsize;
		}
	}
	
	public Iterator<NgnSay> iterator() {
			return this;
	}
 
	
	/**
	 * 自动判断状态装载数据。
	 */
	private void loadData(ResultSet rs) throws Exception{
		if (this.colList==null){
			while(rs.next()){ 
				NgnSay ngnSay= new NgnSay(rs.getLong("id"),DmValueUtils.nullToStr(rs.getString("userSay")),DmValueUtils.nullToStr(rs.getString("sysCmd")),DmValueUtils.nullToStr(rs.getString("cmdContent")),DmValueUtils.nullToStr(rs.getString("cmdP1")),DmValueUtils.nullToStr(rs.getString("cmdP2")),DmValueUtils.nullToStr(rs.getString("cmdP3")),DmValueUtils.nullToStr(rs.getString("cmdP4")),DmValueUtils.nullToStr(rs.getString("cmdP5")),rs.getTimestamp("createTime"),rs.getInt("status"));
				ngnSay.CURRENT_TABLE_NAME = (tableName==null?null:tableName);
				this.results.add(ngnSay);
				this.size++;
			}
		}else{
			while(rs.next()){ 
				NgnSay ngnSay= new NgnSay();
				ngnSay.CURRENT_TABLE_NAME = (tableName==null?null:tableName);
				String col = "";
				for (int k=0;k<this.colList.length;k++){
					col = this.colList[k];
					DmReflectUtils.DAOLiteLoadReflect(rs,ngnSay,col,NgnSay.MAP_COL_NAME.get(col),NgnSay.MAP_COL_TYPE.get(col));
				}
				this.results.add( ngnSay);
				this.size++;
			}
		}
	}
	
	/**
	 * 自动判断状态获取SQL
	 */
	private String getSql(){
		StringBuilder sb = new StringBuilder();
		if (this.colList==null){
			sb.append("SELECT id,userSay,sysCmd,cmdContent,cmdP1,cmdP2,cmdP3,cmdP4,cmdP5,createTime,status FROM "+(tableName==null?"ngn_say":tableName));
			sb.append(" ");
		}else{
			sb.append(" SELECT ");
			for (int i = 0; i < this.colList.length; i++) {
				if (i == 0) {
					sb.append(this.colList[i]);
				} else {
					sb.append("," + this.colList[i]);
				}
			}
			sb.append(" FROM "+(tableName==null?"ngn_say":tableName));
			sb.append(" ");
		}
		sb.append(addSQL);
		return sb.toString();
	}

	

}
